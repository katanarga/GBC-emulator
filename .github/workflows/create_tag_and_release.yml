name: New Release and tag
on:
  workflow_dispatch:
    branches: [master]
jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Get last merged PR
        id: last-merged-pr
        run: |
          PR_NUMBER=$(gh pr list --base master --state merged --limit 1 | awk '{print $1}')
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q '.title')
          read -r first_word second_word <<< "$PR_TITLE"
          if [ "$first_word" != "Release" ]; then
            echo "Error, the last PR merged in master ($PR_TITLE) is not a release, end of workflow. "
            exit 1
          fi
          echo "::set-output name=new_tag::$second_word"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the latest tag
        id: latesttag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

      - name: Create new tag and push it
        run: | 
          git tag ${{ steps.last-merged-pr.outputs.new_tag }}
          git push origin --tags
      
      - name: Create release
        id: create-release
        run: |
          commits=$(git log --pretty=format:"%s" ${{ steps.latesttag.outputs.tag }}..${{ steps.last-merged-pr.outputs.new_tag }})

          feat_commits=$(echo "$commits" | grep "^feat(" | sed 's/^/- /')
          fix_commits=$(echo "$commits" | grep "^fix(" | sed 's/^/- /')
          other_commits=$(echo "$commits" | grep -v "^feat(\|^fix(" | sed 's/^/- /')

          notes=""
          if [ "$feat_commits" ]; then
            notes+="âœ¨ Additions\n$feat_commits\n\n"
          fi
          if [ "$fix_commits" ]; then
            notes+="ðŸš§ Fixes\n$fix_commits\n\n"
          fi
          if [ "$other_commits" ]; then
            notes+="## Other\n$other_commits\n\n"
          fi
          gh release create ${{ steps.last-merged-pr.outputs.new_tag }} --title "Release ${{ steps.last-merged-pr.outputs.new_tag }}" --notes "$notes"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
